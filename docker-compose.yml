# TPT Government Platform - Docker Compose Configuration
# This is an OPTIONAL deployment method for containerized environments

version: '3.8'

services:
  # PHP Application with Apache
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: app
    container_name: tpt-government-app
    restart: unless-stopped
    ports:
      - "${APP_PORT:-8000}:80"
    environment:
      - APP_ENV=${APP_ENV:-production}
      - DB_CONNECTION=mysql
      - DB_HOST=db
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE:-tpt_government}
      - DB_USERNAME=${DB_USERNAME:-tpt_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SESSION_DRIVER=redis
      - CACHE_DRIVER=redis
    volumes:
      - ./logs:/var/log/apache2
      - ./cache:/var/www/html/cache
      - ./sessions:/var/www/html/sessions
      - ./backups:/var/www/html/backups
    depends_on:
      - db
      - redis
    networks:
      - tpt-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MySQL Database
  db:
    image: mysql:8.0
    container_name: tpt-government-db
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_DATABASE:-tpt_government}
      - MYSQL_USER=${DB_USERNAME:-tpt_user}
      - MYSQL_PASSWORD=${DB_PASSWORD}
    ports:
      - "${DB_PORT:-3306}:3306"
    volumes:
      - db_data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
      - ./docker/mysql/conf.d:/etc/mysql/conf.d
    networks:
      - tpt-network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tpt-government-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf
    networks:
      - tpt-network
    command: redis-server /etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Node.js for Frontend Assets (Optional)
  node:
    build:
      context: .
      dockerfile: Dockerfile
      target: node
    container_name: tpt-government-node
    profiles: ["dev"]
    volumes:
      - .:/app
      - /app/node_modules
    working_dir: /app
    networks:
      - tpt-network
    command: npm run dev

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: tpt-government-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - ./public:/var/www/html
    depends_on:
      - app
    networks:
      - tpt-network
    profiles: ["production"]

volumes:
  db_data:
    driver: local
  redis_data:
    driver: local

networks:
  tpt-network:
    driver: bridge
